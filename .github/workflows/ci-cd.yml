name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/rnd-server
  NODE_VERSION: '20'

jobs:
  # Job 1: Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Build application
        run: npm run build

      - name: Run tests
        run: npm run test
        continue-on-error: true

  # Job 2: Build and Push Docker Image
  docker-build-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE_NAME }}:buildcache,mode=max

  # Job 3: Deploy to AWS EC2
  deploy-to-ec2:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || 22 }}
          script: |
            # Navigate to application directory
            cd /home/${{ secrets.EC2_USERNAME }}/rnd-server || mkdir -p /home/${{ secrets.EC2_USERNAME }}/rnd-server && cd /home/${{ secrets.EC2_USERNAME }}/rnd-server
            
            # Login to Docker Hub
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            
            # Pull the latest image
            docker pull ${{ env.DOCKER_IMAGE_NAME }}:latest
            
            # Stop and remove old container
            docker stop rnd-server || true
            docker rm rnd-server || true
            
            # Run new container
            docker run -d \
              --name rnd-server \
              --restart unless-stopped \
              -p 5000:5000 \
              --env-file /home/${{ secrets.EC2_USERNAME }}/rnd-server/.env.prod \
              ${{ env.DOCKER_IMAGE_NAME }}:latest
            
            # Clean up old images
            docker image prune -af
            
            # Show container status
            docker ps -a | grep rnd-server
            
            # Show logs
            docker logs rnd-server --tail 50

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || 22 }}
          script: |
            # Wait for container to be healthy
            sleep 10
            
            # Check if container is running
            if [ "$(docker ps -q -f name=rnd-server)" ]; then
              echo "‚úÖ Container is running"
              docker logs rnd-server --tail 20
            else
              echo "‚ùå Container failed to start"
              docker logs rnd-server --tail 50
              exit 1
            fi

  # Job 4: Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build-push, deploy-to-ec2]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Deployment Success
        if: needs.deploy-to-ec2.result == 'success'
        run: |
          echo "üéâ Deployment successful!"
          echo "Application is now live at: https://15.207.16.104/api/v1"

      - name: Deployment Failed
        if: needs.deploy-to-ec2.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          exit 1
